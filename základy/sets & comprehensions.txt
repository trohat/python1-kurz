1.) Udělejte si list čísel, čísla se můžou opakovat.
Pomocí setu zjistěte počet unikátních čísel.

2.) POZN. Tohle není cvičení na sety.
Napište funkci, která vezme řetězec a vrátí stejně dlouhý 
 řetězec.
V novém řetězci budou ale písmenka seřazená podle abecedy.



Cvičení na další část hodiny:
3.) Napište funkci, která vrátí seznam s třetími mocninami všech čísel 
v zadaném rozsahu.

4.) Vytvořte funkci, která vezme seznam čísel (list of ints) a 
vytvoří z nich řetězce.
4b.) Vytvoří řetězce jen z těch čísel, co jsou menší než 15.

5.) Sečtěte všechna čísla od 15 do 35 (můžete použít funcki sum).

6.) Napište funkci, která vezme čísla v zadaném rozsahu a 
vrátí řetězec, kde jsou daná čísla oddělená čárkami.

7.) Napište funkci, kter vezme řetězec, kde jsou čísla a 
shluky písmenek oddělená mezerami. Funkce vrátí součet čísel 
a písmenka ignoruje.
příklad: "10 abc 20 de44 30 55fg 40" -> 100

8.) Otočte slovník:
Vytvořte funkci, která vezme slovník a vytvoří nový slovník,
kde klíče jsou to, co bylo minule hodnoty a naopak

9.) Vytvočte funkci, která narovná seznam - tj. ze seznamu 
dvě úrovně hlubokého vytvoří seznam jednoúrovňový.
[[1,2], [3,4]] => [1, 2, 3, 4]
Asi budete potřebovat vnořený cyklus - v list comprehensions
lze vnořovat také, jen jsem vám to neukazoval. Zkuste to vymyslet.
