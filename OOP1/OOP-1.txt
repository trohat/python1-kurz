1.) (Hodně lehká)
Vytvořte třídu nápoj.
Nápoj má dvě vlastnosti, jméno a teplotu.
Vytvořte několik nápojů, vytiskněte je.

2.) (Lehká)
To samé jako 2, ale pokud nezadám teplotu, nápoj bude mít
výchozí teplotu 20 stupňů.

3.) (Lehká až střední)
Vytvořte třídu kniha. Kniha má několik vlastností:
Autora, jméno, rok vydání a cenu.
Zařiďte, aby se kniha dala hezky vytisknout. 

4.) (Středně těžká)
Vytvořte třídu zmrzlina.
Zmrzlina má jednu vlastnost, a to je příchuť.
Vytvořte několik konkrétních instancí s různými příchutěmi
a vytvořené instance uložte je do listu.
Nakonec list proiterujte a všechny příchutě vytiskněte.
[Zmrzlina("jahodova"), Zmrzlina("vanilkova")]


--------------------------------------------------------------------------------------------------------------------

1.) Vytvořte třídu KopecekZmrzliny. Kopeček bude mít jednu 
vlastnost, a to je příchuť. Zařiďte, aby se hezky vypisovala.
Vytvořte přibližně tři instance (tři kopečky).

Vytvořte třídu ZmrzlinovyPohar.
Pohár může mít libovolné množství kopečků, při inicializaci
ale nemá ani jeden.
Vytvořte uvnitř poháru metodu na přidávání kopečků.
Vytvořte instanci třídy a několikrát přidejte kopeček.
Zařiďte, aby se třída ZmrzlinovyPohar hezky vypisovala (včetně všech kopečků).

Vytořte instanci a postupně do ní přidávejte kopečky.
např: pohar1.pridej_kopecek(kopecek1)
pohar1.pridej_kopecek(kopecek2)
pohar1.pridej_kopecek(kopecek3)
pohar1.pridej_kopecek(kopecek4)
pohar1.pridej_kopecek(kopecek5)
print(pohar1)

2.) (Velmi podobné)
Vytvořte třídu Kniha. Kniha má název, autora a cenu.
Vytvořte třídu PolickaNaKnihy. Na začátku je prázdná.
Do poličky můžete přidávat knihy, podobně jako kopečky do poháru.
Na třídě PolickaNaKnihy vytvořte metodu celkova_cena, která
spočítá (a vytiskne) celkvoou cenu všech knih v poličce.

3.) (Pokračování ke 2)
Na třídě PolickaNaKnihy vytvořte metodu mame_knihu, která vrátí True nebo False,
podle toho, zda se daná kniha v poličce nachází.

4.) (Další pokračování ke 2)
Ke třídě kniha přidejte vlastnost šířka (knihy).
Ke třídš PolickaNaKnihy také přidejte vlastnost šířka (poličky).
Pokaždé, když přidáváte knihu do poličky, zkontrolujte, jestli
se tam ta kniha vejde. Pokud ne, oznamte to uživateli.

5.) Vymyslete něco dalšího, co by třída PolickaNaKnihy mohla umět.

---------------------------------------------------------------------

1.) Upravte třídu zmrzlinový pohár z minula, aby uměla přidat 
maximálně 3 kopečky.
Pokud přidávám čtvrtý, nic se nestane (prostě tam budou pořád jen 3)
Instancí kopečku můžu mít kolik chci.

2.) Vytvoř třídu VelkyPohar, která bude skoro stejná jako ZmrzlinovyPohar,
jen s tím rozdílem, že limit na kopečky bude 5.


-----------------------------------------------------------------------

Úkol - velký:
Vytvořte třídu zvíře. Zvíře má počet nohou, barvu a metodu vydej_zvuk 
(metoda nebude nic dělat, obecné zvíře zvuk nevydává).
Vytvořte několik tříd na konkrétní zvířata. Např. třída pes, kočka, nebo taky
žirafa a slon. Zajímavá je třída had - ten má 0 nohou.
Každá nová třída bude mít něco navíc (atribut nebo metodu), např. pes může mít atribut rasu nebo
metodu hlidej_barak. (Dohromady vytvořte aspoň jednu metodu a aspoň jeden atribut.)
Každý potomek zvířete zároveň přepíše (přetíží) metodu vydej_zvuk po svém (např. pes zaštěká).
Vytvořte několik instancí různých zvířat.

Vytvořte si seznam (list) a uložte do něj několik instancí různých zvířat. Pak seznam projděte 
cyklem a nechte každé zvíře dát o sobě nahlas vědět (tedy vždy zavolejte metodu vydej_zvuk).

Dodělejte ke zvířatům metodu __str__ nebo __repr__, aby se hezky vypisovala. Zamyslete se, jestli 
se hodí víc k předkovi Zvire nebo k potomkům (nápověda: obě varianty jsou ok).

Vytvořte třídu Klec. Do klece se vejde několik zvířat (jako kopečky do poháru). Vytvořte metodu 
pridej_zvire na přidání zvířete do klece.
(Vsuvka pro pokročilé: Metoda pridej_zvire může mít víc parametrů (více různých zvířat) a přidá je všechny.)
Zařiďte, aby se hezky vypisovala včetně zvířat vevnitř (budeme to potřebovat později).
Můžete vytvořit několik instancí klecí a umístit do nich některé z už vytvořených zvířat.

Vytvořte třídu Zoo. Do zoo se vejde několik klecí. Vytvořte metodu pridej_klec na přidání klece do zoo.
(Vsuvka pro pokročilé: metoda pridej_klec umí přidat několik klecí najednou.)
Třída Zoo se umí hezky vypisovat (vypíše klece i zvířata v nich).
Vytvořte metodu vypis_podle_barvy, která projde celé zoo (všechny klece a zvířata v nich) a vypíše jen
zvířata s určitou barvou (barvu dostane jako parametr).
Vytvořte metodu vypis_podle_nohou, která projde celé zoo (všechny klece a zvířata v nich) a vypíše jen
zvířata s určitým počtem nohou (ten dostane jako parametr).

Do zoo přijel sponzor. Chce všem zvířatům koupit ponožky. Vytvořte metodu spocitej_nohy, která projde
všechny klece a zvířata v nich a spočítá počet nohou v celé zoo.

Vytvořte instanci třídy Zoo a užijte si ji. Vytvořte instance zvířat (pokud je už nemáte), 
do klecí dejte zvířata a klece dejte do zoo. Vypište si zvířata podle barev, podle počtu nohou 
a nezapomeňte spočítat počet ponožek pro sponzora!


--------------------------------------------------------------------------------------------

is-a = dědičnost

has-a = skládání, kompozice

---------------------------------------------------------------------------------------------

Úkol - flexibilní slovník
Vytvořte třídu FlexibilniSlovnik, která nerozlišuje mezi inty a stringy v rolích klíčů.

Pokud ve slovníku vytvořím položku s klíčem 1 (číslo), je to něco jiného, než když vytovřím položku s klíčem '1' (string).
Pro vaši novou třídu to ale bude stejný klíč. Takže když se pokusím přečíst hodnotu s klíčem 1, slovník zkusí najít všechny
možnosti (jedna jako int, i jedna jako string), než se vzdá a ohlásí, že klíč neexistuje.

Příklad:
fs = FlexibilniSlovnik()
fs[1] = "jablko"
print(fs['1']) -> vytiskne "jablko"  (normálně by byla KeyError)

fs['2'] = hruška
print(fs[2]) -> vytiskne "hruška" (normálně by opět byla KeyError)

Všechno ostatní funguje jako v běžném slovníku.